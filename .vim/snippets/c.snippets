# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet else
	else
	{
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do
	{
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
	{
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct St${1:Name}
	{
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_St$1}
	{
		${3:/* data */}
	} St${1:Name};
# Typdef enum
snippet tde
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet .
	[${1}]${2}
snippet un
	unsigned
#=============================================================================
snippet tpl
	#include <iostream>
	#include <string>
	#include <vector>
	#include <set>
	#include <map>
	using namespace std;
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet sing
	#include <iostream>
	#include <string>
	#include <vector>
	#include <map>
	using namespace std;
	class ${1:CClass}
	{
		public:
			static $1 * Ins()
			{
				static $1 * _ins = NULL;
				if ( _ins == NULL)
					_ins = new $1();
				return _ins;
			}
		protected:
			$1()
			{
				static auto_ptr<$1> _auto_ptr = auto_ptr<$1>(this);
			}
			$1(const $1&);
			virtual ~$1(){}
			friend class auto_ptr<$1>;
	};
snippet appcgi
	#include "logapi.h"
	#include "cgiex.h"
	#include "panel_auth.h"
	#include "ptlogin_app_id.h"
	#include "appbase_define.h"
	#include "json.h"

	class ${1:CMyCGI} : public CCGIEx
	{
		public:
			$1(const char* szLogFileName);
			virtual ~$1();

		public:
			bool DealInput(map<string, string> &Params);

		private:
			int Init();
			int CommCheck();
			int OutPut();

		private:
			unsigned m_uinLogin;
	};
	$1::$1(const char* szLogFileName) : CCGIEx(szLogFileName)
	{
		m_bUtf8 = true;
		m_uinLogin = 0;
		API_Logapi_Init(szLogFileName, ${2:myLogId});
	}
	$1::~$1()
	{}
	int $1::Init()
	{
		return 0;
	}

	int $1::CommCheck()
	{
	#ifndef _DEBUG_VER_
		int t_uin = CheckLogin_OiTea_OrSession(&m_stSession, DataSource_WebPlatform, -1, APPSYSTEM_ID);
		if (t_uin < 10000)
		{
			API_Error_Log(LM_ERROR,"CheckLogin_OiTea_OrSession failed, t_uin=%d",  t_uin);
			return -1;
		}
		m_uinLogin = (unsigned)t_uin;
	#endif
		return 0;
	}

	int $1::OutPut()
	{
		return 0;
	}

	bool $1::DealInput(map<string, string> &Params)
	{
		int ret = 0;
		if(0 != (ret = Init()))
		{
			//type error return html please
			return false;
		}
		if(0 != (ret = CommCheck()))
		{
			//type error return html please
			return false;
		}
		${3}
		OutPut();
		return true;
	}

	int main()
	{
		try
		{
			$1 o("$1");
			o.CgiGetMappedParams(NULL);
			o.Run(NULL);
		}
		catch(...)
		{
			API_Error_Log(LM_ERROR, "Unknow Exception");
		}
		return 0;
	}
snippet gt
	#include <gtest/gtest.h>

	TEST(${1:suite_name},${2:case_name})
	{
		${3}
	}
snippet test
	TEST(${1:suite_name},${2:case_name})
	{
		${3}
	}
#=============================================================================
snippet head stl
	#include <iostream>
	#include <string>
	#include <vector>
	#include <set>
	#include <map>
	using namespace std;
snippet head net
	#include <error.h>
	#include <errno.h>
	#include <sys/time.h>
	#include <sys/types.h>
	#include <sys/wait.h>
	#include <unistd.h>
	#include <poll.h>
	#include <sys/epoll.h>
	#include <sys/socket.h>
	#include <arpa/inet.h>
	#include <fcntl.h>
	#include <strings.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <time.h>
#=============================================================================
snippet forstl map
	for(${1:map}<${2:unsigned int}, ${3:string}>::iterator it = ${4:myMap}.begin(); it != $4.end(); ++it)
	{
		${5}
	}
snippet forstl vector
	for(${1:vector}<${2:unsigned int}>::iterator it = ${3:myVec}.begin(); it != $3.end(); ++it)
	{
		${4}
	}
#=============================================================================
snippet udp cli
	int udp_process(
			const char* serverIp,int serverPort,unsigned timeoutMs,
			const char *sendBuf, int sendLen,
			char *recvBuf,int maxLen,int& recvLen
			)
	{
		struct timeval timeout;
		timeout.tv_sec = 0;
		timeout.tv_usec = timeoutMs*1000;

		int ret;

		int socketFd = socket(AF_INET,SOCK_DGRAM,0);
		if(socketFd < 0)
		{
			return -1;
		}

		struct sockaddr_in serv_addr;
		socklen_t addr_len = sizeof(serv_addr);
		bzero(&serv_addr, sizeof(serv_addr));
		serv_addr.sin_family = AF_INET;
		inet_aton(serverIp, &serv_addr.sin_addr);
		serv_addr.sin_port = htons(serverPort);

		ret = sendto(socketFd,sendBuf, sendLen, 0,(struct sockaddr *)(&serv_addr),addr_len);
		if (ret != sendLen)
		{   
			close(socketFd);
			return -2; 
		}   

		struct sockaddr_in  recv_addr;
		int   recv_addr_len = sizeof(recv_addr);
		bzero(&recv_addr,sizeof(recv_addr));

		setsockopt(socketFd , SOL_SOCKET,SO_RCVTIMEO,&timeout,sizeof(timeout));
		ret = recvfrom(socketFd,recvBuf,maxLen,0,(struct sockaddr*)&recv_addr,(socklen_t *) &recv_addr_len);
		if ( ret <= 0 ) 
		{   
			close(socketFd);
			return -3; 
		}
		recvLen = ret;
		close(socketFd);
		return 0;
	}
snippet tcp cli
	//我们这里假定返回包中，和pymman那边server相同的协议。即：len(11字节) + data(len)
	//data = cmd(11) + ret(11) + body(len-33)
	int tcp_handleinput(char* pBuf, int bufLen)
	{   
		if (bufLen < 11) 
		{   
			return -1; 
		}   
		char allLenBuf[12];
		memcpy(allLenBuf,pBuf,11);
		allLenBuf[11]='\0';

		int allLen = atoi(allLenBuf);
		return allLen;
	} 

	int tcp_connect_poll(const char* serverIp,int serverPort,unsigned timeoutMs)
	{
		struct sockaddr_in serv_addr;
		bzero(&serv_addr, sizeof(serv_addr));
		serv_addr.sin_family = AF_INET;
		serv_addr.sin_port   = htons(serverPort);
		if (inet_pton(AF_INET, serverIp, &serv_addr.sin_addr) <= 0)
		{
			return -1;
		}

		int socketFd = socket(AF_INET, SOCK_STREAM, 0);
		if ( socketFd < 0 )
		{
			return -2;
		}

		//设置非阻塞
		int val = fcntl(socketFd, F_GETFL, 0);
		if (val == -1)
		{
			close(socketFd);
			return -3;
		}

		if (fcntl(socketFd, F_SETFL, val | O_NONBLOCK | O_NDELAY) == -1)
		{
			close(socketFd);
			return -4;
		}

		int ret;
		ret = connect(socketFd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
		if (ret < 0)
		{
			if(errno != EINPROGRESS)
			{
				close(socketFd);
				return -1;
			}
			else
			{
				struct pollfd conncet_client[1];
				int nfd = 1;
				memset(&conncet_client[0],0,sizeof(pollfd));
				conncet_client[0].fd = socketFd;
				conncet_client[0].events = POLLIN | POLLOUT;
				int poll_timeout = timeoutMs;
				ret = ::poll(conncet_client, nfd, poll_timeout); 
				if ( ret <= 0 )
				{
					close(socketFd);
					return -1;
				}
				else
				{
					if ((conncet_client[0].revents & POLLIN) || (conncet_client[0].revents & POLLOUT))
					{
						int error;
						int len = sizeof(error);
						int bok = getsockopt(socketFd, SOL_SOCKET, SO_ERROR, &error,(socklen_t*)&len);
						if (bok < 0)
						{
							close(socketFd);
							return -1;
						}
						else if (error)
						{
							close(socketFd);
							return -1;
						}
					}
					else if ((conncet_client[0].revents & POLLERR) || 
							(conncet_client[0].revents & POLLHUP) || 
							(conncet_client[0].revents & POLLNVAL))
					{
						close(socketFd);
						return -1;
					}
				}
				return socketFd;
			}
		}
		return socketFd;
	}
	int tcp_send_poll(int socketFd, const char *sendBuf, int sendLen)
	{
		int ret;
		int nsend =0;
		while(1)
		{
			ret = send(socketFd,sendBuf+nsend,(sendLen-nsend),0);
			if (ret <= 0)
			{
				if ( errno == EINTR || errno == EAGAIN ) //信号中断，或者缓冲区满
					continue;
				else
					break;
			}
			nsend += ret;
			if ( nsend >= sendLen )
				break;
		}
		if (nsend != sendLen)
		{
			return -1;
		}
		return 0;
	}
	int detect_single_read(int socketFd, unsigned timeoutMs)
	{
		struct pollfd conncet_client[1];
		int nfd = 1;
		memset(&conncet_client[0],0,sizeof(pollfd));
		conncet_client[0].fd = socketFd;
		conncet_client[0].events = POLLIN ;

		return poll(conncet_client, nfd, timeoutMs);
	}

	int tcp_recv_poll(int socketFd,char *recvBuf,int maxLen,int& recvLen,unsigned timeoutMs)
	{
		int ret = detect_single_read(socketFd,timeoutMs);
		if (ret <= 0)
		{
			return -2;
		}
		ret = recv(socketFd, recvBuf, maxLen, 0);
		if (ret <= 0)
		{
			return -3;
		}
		//已经接受到的数据长度
		recvLen = ret;

		ret = tcp_handleinput(recvBuf,recvLen);
		if (ret <= 0)
		{
			return -4;
		}

		int allLen = ret;
		int iRemain = allLen - recvLen;

		if (allLen > maxLen)
		{
			return -5;
		}

		while (iRemain > 0)
		{
			ret = detect_single_read(socketFd,timeoutMs);
			if(ret<=0)
			{
				return -6;
			}

			ret = recv(socketFd, recvBuf + recvLen, iRemain, 0);
			if (ret <= 0)
			{
				if ( errno == EINTR || errno == EAGAIN ) //信号中断，或者缓冲区满
					continue;
				else
					break;
			}
			recvLen += ret;
			iRemain -= ret;
		}
		if (recvLen != allLen)
		{
			return -7;
		}

		return 0;
	}
	int tcp_process_poll(
			const char* serverIp,int serverPort,unsigned timeoutMs,
			const char *sendBuf, int sendLen,
			char *recvBuf,int maxLen,int& recvLen
			)
	{
		int ret;
		int socketFd = tcp_connect_poll(serverIp,serverPort,timeoutMs);
		if (socketFd<0)
		{
			return -1;
		}

		ret = tcp_send_poll(socketFd,sendBuf,sendLen);
		if (ret)
		{
			close(socketFd);
			return -2;
		}
		ret = tcp_recv_poll(socketFd, recvBuf, maxLen, recvLen,timeoutMs);
		if (ret)
		{
			close(socketFd);
			return -3;
		}
		close(socketFd);
		return 0;
	}
#=============================================================================
snippet fl
	/**
	 * @brief   第一次进入so时，需要做的初始化工作，只会执行一次。
	 *
	 * @return  0               succ
	 *          else            fail
	 */
	extern "C" int fuload_handle_init()
	{
		return 0;
	}

	/**
	 * @brief   业务逻辑，每次进入
	 *
	 * @param   mapParams       将输入数据按照url方式解析之后的key-value结构
	 *
	 * @return  0               succ
	 *          else            返回值,会用来做统计
	 */
	extern "C" int fuload_handle_process(map<string,string>& mapParams)
	{
		${1}
		return 0;
	}

	/**
	 * @brief   so结束时的收尾工作，只会调用一次。一般不用编写
	 *
	 * @return  0               succ
	 *          else            fail
	 */
	extern "C" int fuload_handle_fini()
	{
		return 0;
	}
